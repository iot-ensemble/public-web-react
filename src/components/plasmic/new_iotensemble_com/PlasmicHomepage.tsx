// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: aTC3q87SvYM316XzoAz9a2
// Component: DFXZXc106C2oUi
import * as React from "react";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import Navbar from "../../Navbar"; // plasmic-import: Yh3OL_UqnMDQoH/component
import Button from "../../Button"; // plasmic-import: cDQxsDRfT9gIBv/component
import PriceCard from "../../PriceCard"; // plasmic-import: Dm_4qJAK1AxCbj/component
import ValueProp from "../../ValueProp"; // plasmic-import: TgzPqT9E_wfNat/component
import FathymFooter from "../../FathymFooter"; // plasmic-import: KWLt0Ypx6GRqq/component

import { useScreenVariants as useScreenVariants_2MnWPdLissBd6Z } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: 2mnWPdLissBD6Z/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_library_plasmic_color_type_css from "../library_plasmic_color_type/plasmic_library_plasmic_color_type.module.css"; // plasmic-import: seaQhLVS4bbjiGvJJrRwyL/projectcss
import projectcss from "./plasmic_new_iotensemble_com.module.css"; // plasmic-import: aTC3q87SvYM316XzoAz9a2/projectcss
import sty from "./PlasmicHomepage.module.css"; // plasmic-import: DFXZXc106C2oUi/css

import AppleIcon from "./icons/PlasmicIcon__Apple"; // plasmic-import: 3B5pxrnVxk-ZUY/icon
import ChevronRightIcon from "./icons/PlasmicIcon__ChevronRight"; // plasmic-import: vmCK544ZPyk_gQ/icon
import CheckIcon from "./icons/PlasmicIcon__Check"; // plasmic-import: hDULe3Rv0s35IQ/icon
import iotHeroAnimatedsvgNdeg29TMj from "./images/iotHeroAnimatedsvg.svg"; // plasmic-import: NDEG29tMJ/picture
import homeYourCodepng3WgSbRzjXeDAbOo from "./images/homeYourCodepng3.png"; // plasmic-import: wgSbRzjXeDAbOo/picture
import homeLowCodepng3RsD6DurGujenjj from "./images/homeLowCodepng3.png"; // plasmic-import: RsD6DurGujenjj/picture
import homeRoutespng3R9PZd2LBqt0DDt from "./images/homeRoutespng3.png"; // plasmic-import: R9pZd2lBqt0dDT/picture
import homeIteratepng3Gwlrygj4CuggFf from "./images/homeIteratepng3.png"; // plasmic-import: Gwlrygj4CUGGFf/picture
import homeModifierpng3MxtSoMkTEd5Vq7 from "./images/homeModifierpng3.png"; // plasmic-import: MXTSoMkTEd5VQ7/picture
import homeNoCodepng3OdAzGmVncUwnL from "./images/homeNoCodepng3.png"; // plasmic-import: OD-AzGmVncUwnL/picture
import enterpriseAsCodepng3DsUeUwJfClbmvk from "./images/enterpriseAsCodepng3.png"; // plasmic-import: DsUEUwJFClbmvk/picture
import accelerateInnovationpng2PqB4CdraXvhygv from "./images/accelerateInnovationpng2.png"; // plasmic-import: pqB4cdraXVHYGV/picture
import enterpriseWhitelabelspngHFnspgaq32PS36 from "./images/enterpriseWhitelabelspng.png"; // plasmic-import: HFnspgaq32pS36/picture

export type PlasmicHomepage__VariantMembers = {};

export type PlasmicHomepage__VariantsArgs = {};
type VariantPropType = keyof PlasmicHomepage__VariantsArgs;
export const PlasmicHomepage__VariantProps = new Array<VariantPropType>();

export type PlasmicHomepage__ArgsType = {};
type ArgPropType = keyof PlasmicHomepage__ArgsType;
export const PlasmicHomepage__ArgProps = new Array<ArgPropType>();

export type PlasmicHomepage__OverridesType = {
  root?: p.Flex<"div">;
  navbar?: p.Flex<typeof Navbar>;
  learnMore?: p.Flex<"a">;
  section?: p.Flex<"section">;
  foreground3?: p.Flex<"div">;
  fathymFooter?: p.Flex<typeof FathymFooter>;
};

export interface DefaultHomepageProps {
  className?: string;
}

function PlasmicHomepage__RenderFunc(props: {
  variants: PlasmicHomepage__VariantsArgs;
  args: PlasmicHomepage__ArgsType;
  overrides: PlasmicHomepage__OverridesType;

  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(
    () =>
      Object.assign(
        {},

        props.args
      ),
    [props.args]
  );

  const $props = args;

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariants_2MnWPdLissBd6Z()
  });

  return (
    <React.Fragment>
      {}
      {}

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_library_plasmic_color_type_css.plasmic_tokens,
            sty.root
          )}
        >
          <Navbar
            data-plasmic-name={"navbar"}
            data-plasmic-override={overrides.navbar}
            className={classNames("__wab_instance", sty.navbar)}
          />

          <div className={classNames(projectcss.all, sty.freeBox__epFv3)}>
            <p.Stack
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__vpnyy)}
            >
              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__iywz)}
              >
                <div className={classNames(projectcss.all, sty.freeBox__bxdla)}>
                  <p.Stack
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.columns__hcB7Q)}
                  >
                    <div
                      className={classNames(projectcss.all, sty.column__vnNg)}
                    >
                      <p.Stack
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__gQ85H
                        )}
                      >
                        <p.Stack
                          as={"div"}
                          hasGap={true}
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__vF0O5
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text___2DLMy
                            )}
                          >
                            {"Increase Your Business Value with IoT Data"}
                          </div>

                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__ohdT0
                            )}
                          >
                            {
                              "The most powerful and easy-to-use IoT Platform. Reduce the time and work involved in getting your devices connected, understanding your data, scaling to your needs, and delivering end-to-end customer driven IoT applications."
                            }
                          </div>

                          <div
                            className={classNames(
                              projectcss.all,
                              sty.columns__d8OlI
                            )}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                sty.column__afPOz
                              )}
                            >
                              <Button
                                className={classNames(
                                  "__wab_instance",
                                  sty.button__em4ZW
                                )}
                                color={
                                  hasVariant(
                                    globalVariants,
                                    "screen",
                                    "mobileOnly"
                                  )
                                    ? ("blue" as const)
                                    : ("blue" as const)
                                }
                                endIcon={
                                  <ChevronRightIcon
                                    className={classNames(
                                      projectcss.all,
                                      sty.svg___8Z4Wm
                                    )}
                                    role={"img"}
                                  />
                                }
                                link={
                                  hasVariant(
                                    globalVariants,
                                    "screen",
                                    "mobileOnly"
                                  )
                                    ? ("/dashboard/create-project" as const)
                                    : ("/dashboard/iot/" as const)
                                }
                                showEndIcon={
                                  hasVariant(
                                    globalVariants,
                                    "screen",
                                    "mobileOnly"
                                  )
                                    ? true
                                    : true
                                }
                              >
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__nitan
                                  )}
                                >
                                  {"Get Started for Free"}
                                </div>
                              </Button>
                            </div>

                            <div
                              className={classNames(
                                projectcss.all,
                                sty.column__cusEy
                              )}
                            >
                              <a
                                data-plasmic-name={"learnMore"}
                                data-plasmic-override={overrides.learnMore}
                                className={classNames(
                                  projectcss.all,
                                  projectcss.a,
                                  sty.learnMore
                                )}
                                href={"/forecast/docs/" as const}
                                target={"_blank" as const}
                              >
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__quyyj
                                  )}
                                >
                                  {"Learn more >"}
                                </div>
                              </a>
                            </div>
                          </div>
                        </p.Stack>
                      </p.Stack>
                    </div>

                    <div
                      className={classNames(projectcss.all, sty.column__expGq)}
                    >
                      <p.PlasmicImg
                        alt={""}
                        className={classNames(sty.img__gpFsr)}
                        displayHeight={"auto" as const}
                        displayMaxHeight={"none" as const}
                        displayMaxWidth={"100%" as const}
                        displayMinHeight={"0" as const}
                        displayMinWidth={"0" as const}
                        displayWidth={"auto" as const}
                        loading={"lazy" as const}
                        src={{
                          src: iotHeroAnimatedsvgNdeg29TMj,
                          fullWidth: 240,
                          fullHeight: 150,
                          aspectRatio: 1.600394
                        }}
                      />
                    </div>
                  </p.Stack>
                </div>
              </p.Stack>
            </p.Stack>
          </div>

          {true ? (
            <div className={classNames(projectcss.all, sty.freeBox__bC2I4)}>
              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__xbh3Q)}
              >
                <div className={classNames(projectcss.all, sty.freeBox__xz0V)}>
                  <h2
                    className={classNames(
                      projectcss.all,
                      projectcss.h2,
                      projectcss.__wab_text,
                      sty.h2__lYmex
                    )}
                  >
                    {"Flashup today, scale tomorrow"}
                  </h2>
                </div>

                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text___0Kq2
                  )}
                >
                  {
                    '"Life moves pretty fast. If you don\'t stop and look around once in a while, you could miss it." - Ferris Bueller\nIncrease the tempo of development, adoption of new strategies, and get more out of your time.'
                  }
                </div>
              </p.Stack>
            </div>
          ) : null}
          {true ? (
            <div className={classNames(projectcss.all, sty.freeBox__wKrv3)}>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__bbXqA
                )}
              >
                {"TAKE THE FATHYM JOURNEY"}
              </div>
            </div>
          ) : null}
          {true ? (
            <div className={classNames(projectcss.all, sty.freeBox__kknE3)}>
              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__giKx)}
              >
                <h1
                  className={classNames(
                    projectcss.all,
                    projectcss.h1,
                    projectcss.__wab_text,
                    sty.h1__yb1HZ
                  )}
                >
                  {"1. Start with your skills"}
                </h1>

                <div className={classNames(projectcss.all, sty.columns__zvzRq)}>
                  <div
                    className={classNames(projectcss.all, sty.column__iFgcy)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__fXzqq
                      )}
                    >
                      {
                        "Developers love the frameworks they love. No matter the framework, Fathym has you covered.  Deploy with micro frontends to seamlessly use the right frameworks for the right job."
                      }
                    </div>
                  </div>

                  <div
                    className={classNames(projectcss.all, sty.column__pVzjU)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__ackgy
                      )}
                    >
                      {
                        "Non-developers need a way to showcase their own skills. Whether a photo gallery, blog, or                                                          simple web presence, utilize Fathym to combine proven open source solutions and bring your ideas to life."
                      }
                    </div>
                  </div>
                </div>

                <div className={classNames(projectcss.all, sty.columns__hNefz)}>
                  <div className={classNames(projectcss.all, sty.column__dk0K)}>
                    <p.PlasmicImg
                      alt={""}
                      className={classNames(sty.img__wHvhC)}
                      displayHeight={"auto" as const}
                      displayMaxHeight={"none" as const}
                      displayMaxWidth={"100%" as const}
                      displayMinHeight={"0" as const}
                      displayMinWidth={"0" as const}
                      displayWidth={"auto" as const}
                      loading={"lazy" as const}
                      src={{
                        src: homeYourCodepng3WgSbRzjXeDAbOo,
                        fullWidth: 400,
                        fullHeight: 400,
                        aspectRatio: undefined
                      }}
                    />
                  </div>

                  <div className={classNames(projectcss.all, sty.column__wrrT)}>
                    <div
                      className={classNames(projectcss.all, sty.freeBox__qZzRl)}
                    >
                      <h3
                        className={classNames(
                          projectcss.all,
                          projectcss.h3,
                          projectcss.__wab_text,
                          sty.h3___6YV38
                        )}
                      >
                        {"Your code"}
                      </h3>

                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__jGdJs
                        )}
                      >
                        {
                          "Bring your sites and applications that you already have in GitHub or NPM."
                        }
                      </div>
                    </div>

                    <div
                      className={classNames(
                        projectcss.all,
                        sty.freeBox___4Z9A3
                      )}
                    >
                      <h3
                        className={classNames(
                          projectcss.all,
                          projectcss.h3,
                          projectcss.__wab_text,
                          sty.h3___21Qvu
                        )}
                      >
                        {"Build and deploy"}
                      </h3>

                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text___4FaWv
                        )}
                      >
                        {
                          "Automate devops processes behind the scenes so you get back to the good stuff."
                        }
                      </div>
                    </div>

                    <Button
                      className={classNames("__wab_instance", sty.button__hW1E)}
                      color={
                        hasVariant(globalVariants, "screen", "mobileOnly")
                          ? ("blue" as const)
                          : ("blue" as const)
                      }
                      endIcon={
                        <ChevronRightIcon
                          className={classNames(projectcss.all, sty.svg__dqvXx)}
                          role={"img"}
                        />
                      }
                      link={
                        hasVariant(globalVariants, "screen", "mobileOnly")
                          ? ("/dashboard/create-project" as const)
                          : ("/dashboard" as const)
                      }
                      showEndIcon={
                        hasVariant(globalVariants, "screen", "mobileOnly")
                          ? true
                          : true
                      }
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__ggkam
                        )}
                      >
                        {"Get Started for Free"}
                      </div>
                    </Button>
                  </div>
                </div>
              </p.Stack>
            </div>
          ) : null}
          {true ? (
            <div className={classNames(projectcss.all, sty.freeBox__f3V1)}>
              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__yjwEh)}
              >
                <h1
                  className={classNames(
                    projectcss.all,
                    projectcss.h1,
                    projectcss.__wab_text,
                    sty.h1__p9XUt
                  )}
                >
                  {"2. Use your team to do more"}
                </h1>

                {true ? (
                  <div
                    className={classNames(projectcss.all, sty.columns__qg8Ui)}
                  >
                    <div
                      className={classNames(projectcss.all, sty.column__aAkS)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__xjs2W
                        )}
                      >
                        {
                          "Keeping up with the ebb and flow of technology is a daunting task for teams. Get more than the sum of your parts, leverage Fathym to automate your team workflows."
                        }
                      </div>
                    </div>

                    <div
                      className={classNames(projectcss.all, sty.column__o5Sli)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__fkncH
                        )}
                      >
                        {
                          "Take your experience and coding skills to new heights. Fathym will help you develop low-code solutions that enable junior and mid-                          level developers to accelerate."
                        }
                      </div>
                    </div>
                  </div>
                ) : null}
                {true ? (
                  <div
                    className={classNames(projectcss.all, sty.columns__m3Sj)}
                  >
                    <div
                      className={classNames(projectcss.all, sty.column__arEBt)}
                    >
                      <p.PlasmicImg
                        alt={""}
                        className={classNames(sty.img___2RlSf)}
                        displayHeight={"auto" as const}
                        displayMaxHeight={"none" as const}
                        displayMaxWidth={"100%" as const}
                        displayMinHeight={"0" as const}
                        displayMinWidth={"0" as const}
                        displayWidth={"auto" as const}
                        loading={"lazy" as const}
                        src={{
                          src: homeLowCodepng3RsD6DurGujenjj,
                          fullWidth: 400,
                          fullHeight: 400,
                          aspectRatio: undefined
                        }}
                      />
                    </div>

                    <div
                      className={classNames(projectcss.all, sty.column__hm90C)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__y2Jot
                        )}
                      >
                        <h3
                          className={classNames(
                            projectcss.all,
                            projectcss.h3,
                            projectcss.__wab_text,
                            sty.h3__t26E
                          )}
                        >
                          {"Low code"}
                        </h3>

                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__hoQ5C
                          )}
                        >
                          {
                            "Use existing open source solutions or turn your code into reusable building blocks."
                          }
                        </div>
                      </div>

                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__qTwta
                        )}
                      >
                        <h3
                          className={classNames(
                            projectcss.all,
                            projectcss.h3,
                            projectcss.__wab_text,
                            sty.h3__poFvh
                          )}
                        >
                          {"Flashups"}
                        </h3>

                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__xo88O
                          )}
                        >
                          {
                            "Micro frontend applications make it simple to create your business in a day."
                          }
                        </div>
                      </div>

                      <Button
                        className={classNames(
                          "__wab_instance",
                          sty.button__gbEKt
                        )}
                        color={
                          hasVariant(globalVariants, "screen", "mobileOnly")
                            ? ("blue" as const)
                            : ("blue" as const)
                        }
                        endIcon={
                          <ChevronRightIcon
                            className={classNames(
                              projectcss.all,
                              sty.svg__eyIcs
                            )}
                            role={"img"}
                          />
                        }
                        link={
                          hasVariant(globalVariants, "screen", "mobileOnly")
                            ? ("/dashboard/create-project" as const)
                            : ("/dashboard" as const)
                        }
                        showEndIcon={
                          hasVariant(globalVariants, "screen", "mobileOnly")
                            ? true
                            : true
                        }
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text___64WgX
                          )}
                        >
                          {"Get Started for Free"}
                        </div>
                      </Button>
                    </div>
                  </div>
                ) : null}

                <div className={classNames(projectcss.all, sty.columns__er8YQ)}>
                  <div
                    className={classNames(projectcss.all, sty.column__dlHea)}
                  >
                    <h2
                      className={classNames(
                        projectcss.all,
                        projectcss.h2,
                        projectcss.__wab_text,
                        sty.h2__urn1G
                      )}
                    >
                      {"Compose Applications"}
                    </h2>

                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__vBf6B
                      )}
                    >
                      {
                        "Fathym micro frontends are a powerful tool that allow your team to use the frameworks best fit for the job.  Break free from monolithic, use open source and custom code in harmony."
                      }
                    </div>
                  </div>

                  <div
                    className={classNames(projectcss.all, sty.column__t1Zd6)}
                  >
                    <p.PlasmicImg
                      alt={""}
                      className={classNames(sty.img__cqMfx)}
                      displayHeight={"auto" as const}
                      displayMaxHeight={"none" as const}
                      displayMaxWidth={"100%" as const}
                      displayMinHeight={"0" as const}
                      displayMinWidth={"0" as const}
                      displayWidth={"auto" as const}
                      loading={"lazy" as const}
                      src={{
                        src: homeRoutespng3R9PZd2LBqt0DDt,
                        fullWidth: 400,
                        fullHeight: 400,
                        aspectRatio: undefined
                      }}
                    />
                  </div>
                </div>

                <div className={classNames(projectcss.all, sty.columns__ywFpd)}>
                  <div className={classNames(projectcss.all, sty.column__aqQt)}>
                    <p.PlasmicImg
                      alt={""}
                      className={classNames(sty.img__b2MW)}
                      displayHeight={"auto" as const}
                      displayMaxHeight={"none" as const}
                      displayMaxWidth={"100%" as const}
                      displayMinHeight={"0" as const}
                      displayMinWidth={"0" as const}
                      displayWidth={"auto" as const}
                      loading={"lazy" as const}
                      src={{
                        src: homeIteratepng3Gwlrygj4CuggFf,
                        fullWidth: 400,
                        fullHeight: 400,
                        aspectRatio: undefined
                      }}
                    />
                  </div>

                  <div
                    className={classNames(projectcss.all, sty.column__b839O)}
                  >
                    <h2
                      className={classNames(
                        projectcss.all,
                        projectcss.h2,
                        projectcss.__wab_text,
                        sty.h2__inyz
                      )}
                    >
                      {"Engage Users"}
                    </h2>

                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__s2RtN
                      )}
                    >
                      {
                        "Don't wait weeks and months, take hours. Build engaging user experiences that Flashup your idea. Learn from your users and rapidly react with solutions to their problems."
                      }
                    </div>

                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__l9LLj
                      )}
                    >
                      {"\n\n\n"}
                    </div>
                  </div>
                </div>

                <div className={classNames(projectcss.all, sty.columns__ic9D)}>
                  <div
                    className={classNames(projectcss.all, sty.column__bsiz7)}
                  >
                    <h2
                      className={classNames(
                        projectcss.all,
                        projectcss.h2,
                        projectcss.__wab_text,
                        sty.h2___5Uw1D
                      )}
                    >
                      {"Enhance Experiences"}
                    </h2>

                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__pAwD
                      )}
                    >
                      {
                        "Augment your applications with low-code modifiers. Bring Google Tag Manager to every application, add support chat from your CRM, or develop custom enhancements yourself. Configure and manage from a central location across all applications.\n\n"
                      }
                    </div>
                  </div>

                  <div
                    className={classNames(projectcss.all, sty.column___5SgTv)}
                  >
                    <p.PlasmicImg
                      alt={""}
                      className={classNames(sty.img__loHm)}
                      displayHeight={"auto" as const}
                      displayMaxHeight={"none" as const}
                      displayMaxWidth={"100%" as const}
                      displayMinHeight={"0" as const}
                      displayMinWidth={"0" as const}
                      displayWidth={"auto" as const}
                      loading={"lazy" as const}
                      src={{
                        src: homeModifierpng3MxtSoMkTEd5Vq7,
                        fullWidth: 400,
                        fullHeight: 400,
                        aspectRatio: undefined
                      }}
                    />
                  </div>
                </div>
              </p.Stack>
            </div>
          ) : null}
          {true ? (
            <div className={classNames(projectcss.all, sty.freeBox___4NsF)}>
              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__zespy)}
              >
                <h1
                  className={classNames(
                    projectcss.all,
                    projectcss.h1,
                    projectcss.__wab_text,
                    sty.h1__ugJew
                  )}
                >
                  {"3. Scale your solutions"}
                </h1>

                <div className={classNames(projectcss.all, sty.columns__izvcn)}>
                  <div
                    className={classNames(projectcss.all, sty.column__log8J)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__uN4J3
                      )}
                    >
                      {
                        "You no longer need a huge budget or months to get started. Flashup your business across shared infrastructure built to scale with you and your customer's needs."
                      }
                    </div>
                  </div>

                  <div className={classNames(projectcss.all, sty.column__ikJt)}>
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__tyqWe
                      )}
                    >
                      {
                        "Outgrown Fathym's shared infrastructure? Looking to bolster the value of your business? Employ all the same great tools from your own private or managed clouds."
                      }
                    </div>
                  </div>
                </div>

                <div className={classNames(projectcss.all, sty.columns__jeU1O)}>
                  <div
                    className={classNames(projectcss.all, sty.column___1U4Gd)}
                  >
                    <p.PlasmicImg
                      alt={""}
                      className={classNames(sty.img__tCrm)}
                      displayHeight={"auto" as const}
                      displayMaxHeight={"none" as const}
                      displayMaxWidth={"100%" as const}
                      displayMinHeight={"0" as const}
                      displayMinWidth={"0" as const}
                      displayWidth={"auto" as const}
                      loading={"lazy" as const}
                      src={{
                        src: homeNoCodepng3OdAzGmVncUwnL,
                        fullWidth: 400,
                        fullHeight: 400,
                        aspectRatio: undefined
                      }}
                    />
                  </div>

                  <div
                    className={classNames(projectcss.all, sty.column__sZf1B)}
                  >
                    <div
                      className={classNames(projectcss.all, sty.freeBox__aBAg)}
                    >
                      <h3
                        className={classNames(
                          projectcss.all,
                          projectcss.h3,
                          projectcss.__wab_text,
                          sty.h3__w4Lg
                        )}
                      >
                        {"No code"}
                      </h3>

                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__lMGW
                        )}
                      >
                        {
                          "Build tools that streamline productivity and bring value to your customers."
                        }
                      </div>
                    </div>

                    <div
                      className={classNames(projectcss.all, sty.freeBox__kvqZc)}
                    >
                      <h3
                        className={classNames(
                          projectcss.all,
                          projectcss.h3,
                          projectcss.__wab_text,
                          sty.h3__xk8G0
                        )}
                      >
                        {"Cloud scale"}
                      </h3>

                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__h9IqG
                        )}
                      >
                        {
                          "Flashup on shared infrastructure, grow with your customers, scale as needed."
                        }
                      </div>
                    </div>

                    <Button
                      className={classNames(
                        "__wab_instance",
                        sty.button__gDa1T
                      )}
                      color={
                        hasVariant(globalVariants, "screen", "mobileOnly")
                          ? ("blue" as const)
                          : ("blue" as const)
                      }
                      endIcon={
                        <ChevronRightIcon
                          className={classNames(projectcss.all, sty.svg__bBrg1)}
                          role={"img"}
                        />
                      }
                      link={
                        hasVariant(globalVariants, "screen", "mobileOnly")
                          ? ("/dashboard/create-project" as const)
                          : ("/dashboard" as const)
                      }
                      showEndIcon={
                        hasVariant(globalVariants, "screen", "mobileOnly")
                          ? true
                          : true
                      }
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__tIofq
                        )}
                      >
                        {"Get Started for Free"}
                      </div>
                    </Button>
                  </div>
                </div>

                {true ? (
                  <div
                    className={classNames(projectcss.all, sty.columns__uoKv2)}
                  >
                    <div
                      className={classNames(projectcss.all, sty.column__taXiI)}
                    >
                      <h2
                        className={classNames(
                          projectcss.all,
                          projectcss.h2,
                          projectcss.__wab_text,
                          sty.h2__sxNoH
                        )}
                      >
                        {"Enterprise as Code"}
                      </h2>

                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__deEix
                        )}
                      >
                        {
                          "Bringing infrastructure as code, application life cycle and identity management at scale. Develop custom automations that accelerate and enable your existing teams."
                        }
                      </div>
                    </div>

                    <div
                      className={classNames(projectcss.all, sty.column__kS9Kt)}
                    >
                      <p.PlasmicImg
                        alt={""}
                        className={classNames(sty.img__zb7Z)}
                        displayHeight={"auto" as const}
                        displayMaxHeight={"none" as const}
                        displayMaxWidth={"100%" as const}
                        displayMinHeight={"0" as const}
                        displayMinWidth={"0" as const}
                        displayWidth={"auto" as const}
                        loading={"lazy" as const}
                        src={{
                          src: enterpriseAsCodepng3DsUeUwJfClbmvk,
                          fullWidth: 1120,
                          fullHeight: 670,
                          aspectRatio: undefined
                        }}
                      />
                    </div>
                  </div>
                ) : null}
                {true ? (
                  <div
                    className={classNames(projectcss.all, sty.columns__u1Wr)}
                  >
                    <div
                      className={classNames(projectcss.all, sty.column___2ZmPi)}
                    >
                      <p.PlasmicImg
                        alt={""}
                        className={classNames(sty.img__zbr05)}
                        displayHeight={"auto" as const}
                        displayMaxHeight={"none" as const}
                        displayMaxWidth={"100%" as const}
                        displayMinHeight={"0" as const}
                        displayMinWidth={"0" as const}
                        displayWidth={"auto" as const}
                        loading={"lazy" as const}
                        src={{
                          src: accelerateInnovationpng2PqB4CdraXvhygv,
                          fullWidth: 517,
                          fullHeight: 308,
                          aspectRatio: undefined
                        }}
                      />
                    </div>

                    <div
                      className={classNames(projectcss.all, sty.column__zZbUz)}
                    >
                      <h2
                        className={classNames(
                          projectcss.all,
                          projectcss.h2,
                          projectcss.__wab_text,
                          sty.h2__ppjjY
                        )}
                      >
                        {"Accelerate Innovation"}
                      </h2>

                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__wmcbd
                        )}
                      >
                        {
                          "Fathym enhances your development workflow so your resources can can focus on the customer. Accelerate internal innovation and streamline customer engagement."
                        }
                      </div>
                    </div>
                  </div>
                ) : null}
                {true ? (
                  <div
                    className={classNames(projectcss.all, sty.columns__f3Una)}
                  >
                    <div
                      className={classNames(projectcss.all, sty.column__sArGi)}
                    >
                      <h2
                        className={classNames(
                          projectcss.all,
                          projectcss.h2,
                          projectcss.__wab_text,
                          sty.h2___43BLm
                        )}
                      >
                        {"Enterprise Whitelabels"}
                      </h2>

                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__rktQm
                        )}
                      >
                        {
                          "Enable new lines of business, migrate your legacy solutions, and advance your technology today. Flashup a website in mere minutes with plug-and-play open-source apps."
                        }
                      </div>
                    </div>

                    <div
                      className={classNames(projectcss.all, sty.column__hbTjx)}
                    >
                      <p.PlasmicImg
                        alt={""}
                        className={classNames(sty.img__uZnx3)}
                        displayHeight={"auto" as const}
                        displayMaxHeight={"none" as const}
                        displayMaxWidth={"100%" as const}
                        displayMinHeight={"0" as const}
                        displayMinWidth={"0" as const}
                        displayWidth={"auto" as const}
                        loading={"lazy" as const}
                        src={{
                          src: enterpriseWhitelabelspngHFnspgaq32PS36,
                          fullWidth: 741,
                          fullHeight: 439,
                          aspectRatio: undefined
                        }}
                      />
                    </div>
                  </div>
                ) : null}
              </p.Stack>
            </div>
          ) : null}

          <section
            data-plasmic-name={"section"}
            data-plasmic-override={overrides.section}
            className={classNames(projectcss.all, sty.section)}
          >
            <p.Stack
              as={"div"}
              data-plasmic-name={"foreground3"}
              data-plasmic-override={overrides.foreground3}
              hasGap={true}
              className={classNames(projectcss.all, sty.foreground3)}
            >
              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__bkWh)}
              >
                <div className={classNames(projectcss.all, sty.freeBox__gE8Bq)}>
                  <h2
                    className={classNames(
                      projectcss.all,
                      projectcss.h2,
                      projectcss.__wab_text,
                      sty.h2__wdd5J
                    )}
                  >
                    {"Connect, Understand, Scale"}
                  </h2>
                </div>

                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__vvPah
                  )}
                >
                  {
                    "IoT Ensemble helps you rapidly connect devices, analyze your data, and create actionable insights, all while using best practice workflows for cloud-native IoT applications.\n\nWhen getting started with a new IoT solution, you’re not only working towards connecting a device, but also on how to process and store the data in order to perform tasks such as visualization, machine learning, alerts/notifications, and application development. This requires learning a number of cloud-native technologies before being able to deliver a solution. Who has time for that? Start with IoT Ensemble and leave the worries behind."
                  }
                </div>
              </p.Stack>

              <div className={classNames(projectcss.all, sty.columns__tbXOa)}>
                <div className={classNames(projectcss.all, sty.column__egtSh)}>
                  <Button
                    className={classNames("__wab_instance", sty.button__kad4L)}
                    color={"blue" as const}
                    link={"/dashboard/iot/" as const}
                  >
                    {"Get Started for Free"}
                  </Button>
                </div>
              </div>
            </p.Stack>
          </section>

          {true ? (
            <p.Stack
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__epaR)}
            >
              {true ? (
                <p.Stack
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__tjf6A)}
                >
                  <p.Stack
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__fjdYp)}
                  >
                    <div
                      className={classNames(projectcss.all, sty.freeBox__epGsK)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__foliw
                        )}
                      >
                        {"Pricing plans"}
                      </div>
                    </div>
                  </p.Stack>

                  <p.Stack
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__vxbFo)}
                  >
                    <PriceCard
                      action={
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__u9AyN
                          )}
                        >
                          {"Start for free"}
                        </div>
                      }
                      className={classNames(
                        "__wab_instance",
                        sty.priceCard__xbKbv
                      )}
                      description={
                        <React.Fragment>
                          <ValueProp
                            className={classNames(
                              "__wab_instance",
                              sty.valueProp__kylPf
                            )}
                            description={
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__wbTyg
                                )}
                              >
                                {"Unlimited Projects"}
                              </div>
                            }
                            flatIcon={true}
                            icon={
                              <CheckIcon
                                className={classNames(
                                  projectcss.all,
                                  sty.svg__yQxo0
                                )}
                                role={"img"}
                              />
                            }
                            noTitle={true}
                          />

                          <ValueProp
                            className={classNames(
                              "__wab_instance",
                              sty.valueProp__ceq4N
                            )}
                            description={
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__cmch5
                                )}
                              >
                                {"Team Social Feed"}
                              </div>
                            }
                            flatIcon={true}
                            icon={
                              <CheckIcon
                                className={classNames(
                                  projectcss.all,
                                  sty.svg___4VVy4
                                )}
                                role={"img"}
                              />
                            }
                            noTitle={true}
                          />

                          <ValueProp
                            className={classNames(
                              "__wab_instance",
                              sty.valueProp___52U
                            )}
                            description={
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__cSkE7
                                )}
                              >
                                {"Deploy any Version"}
                              </div>
                            }
                            flatIcon={true}
                            icon={
                              <CheckIcon
                                className={classNames(
                                  projectcss.all,
                                  sty.svg__mkFdg
                                )}
                                role={"img"}
                              />
                            }
                            noTitle={true}
                          />

                          <ValueProp
                            className={classNames(
                              "__wab_instance",
                              sty.valueProp__lKorr
                            )}
                            description={
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__fV8AL
                                )}
                              >
                                {"Custom Domain"}
                              </div>
                            }
                            flatIcon={true}
                            icon={
                              <CheckIcon
                                className={classNames(
                                  projectcss.all,
                                  sty.svg__p9AD7
                                )}
                                role={"img"}
                              />
                            }
                            noTitle={true}
                          />

                          <ValueProp
                            className={classNames(
                              "__wab_instance",
                              sty.valueProp__muGj5
                            )}
                            description={
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text___9OnHd
                                )}
                              >
                                {"Free SSL"}
                              </div>
                            }
                            flatIcon={true}
                            icon={
                              <CheckIcon
                                className={classNames(
                                  projectcss.all,
                                  sty.svg___9Cdut
                                )}
                                role={"img"}
                              />
                            }
                            noTitle={true}
                          />
                        </React.Fragment>
                      }
                      dollars={"0"}
                    />

                    <PriceCard
                      action={
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__grWJv
                          )}
                        >
                          {"Buy Personal"}
                        </div>
                      }
                      className={classNames(
                        "__wab_instance",
                        sty.priceCard__jaHaI
                      )}
                      description={
                        <React.Fragment>
                          <ValueProp
                            className={classNames(
                              "__wab_instance",
                              sty.valueProp__cQd62
                            )}
                            description={"Starter plan, plus:"}
                            flatIcon={true}
                            icon={
                              <CheckIcon
                                className={classNames(
                                  projectcss.all,
                                  sty.svg__wTgt
                                )}
                                role={"img"}
                              />
                            }
                            noTitle={true}
                          />

                          <ValueProp
                            className={classNames(
                              "__wab_instance",
                              sty.valueProp__vGtWy
                            )}
                            description={"Single Sign-on and Access Control"}
                            flatIcon={true}
                            icon={
                              <CheckIcon
                                className={classNames(
                                  projectcss.all,
                                  sty.svg__xTfy
                                )}
                                role={"img"}
                              />
                            }
                            noTitle={true}
                          />

                          <ValueProp
                            className={classNames(
                              "__wab_instance",
                              sty.valueProp__yuEoS
                            )}
                            description={"Application  Modifiers"}
                            flatIcon={true}
                            icon={
                              <CheckIcon
                                className={classNames(
                                  projectcss.all,
                                  sty.svg__vnHuq
                                )}
                                role={"img"}
                              />
                            }
                            noTitle={true}
                          />

                          <ValueProp
                            className={classNames(
                              "__wab_instance",
                              sty.valueProp__x6Xux
                            )}
                            description={"Server-less Functions"}
                            flatIcon={true}
                            icon={
                              <CheckIcon
                                className={classNames(
                                  projectcss.all,
                                  sty.svg__yDSw6
                                )}
                                role={"img"}
                              />
                            }
                            noTitle={true}
                          />
                        </React.Fragment>
                      }
                      dollars={"8"}
                      label={
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__pTd5E
                          )}
                        >
                          {"personal"}
                        </div>
                      }
                    />

                    <PriceCard
                      action={
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text___9MIf
                          )}
                        >
                          {"Buy Pro"}
                        </div>
                      }
                      className={classNames(
                        "__wab_instance",
                        sty.priceCard__yWPuj
                      )}
                      description={
                        <React.Fragment>
                          <ValueProp
                            className={classNames(
                              "__wab_instance",
                              sty.valueProp__s6Gis
                            )}
                            description={
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__vG347
                                )}
                              >
                                {"Personal plan, plus:"}
                              </div>
                            }
                            flatIcon={true}
                            icon={
                              <CheckIcon
                                className={classNames(
                                  projectcss.all,
                                  sty.svg__sJmpz
                                )}
                                role={"img"}
                              />
                            }
                            noTitle={true}
                          />

                          <ValueProp
                            className={classNames(
                              "__wab_instance",
                              sty.valueProp__vd8AV
                            )}
                            description={"Branded Custom Single Sign-on"}
                            flatIcon={true}
                            icon={
                              <CheckIcon
                                className={classNames(
                                  projectcss.all,
                                  sty.svg__etpXj
                                )}
                                role={"img"}
                              />
                            }
                            noTitle={true}
                          />

                          <ValueProp
                            className={classNames(
                              "__wab_instance",
                              sty.valueProp__bXfxm
                            )}
                            description={"Affiliate White-labeling"}
                            flatIcon={true}
                            icon={
                              <CheckIcon
                                className={classNames(
                                  projectcss.all,
                                  sty.svg__vrEh
                                )}
                                role={"img"}
                              />
                            }
                            noTitle={true}
                          />

                          <ValueProp
                            className={classNames(
                              "__wab_instance",
                              sty.valueProp__ipej
                            )}
                            description={"Priority Support"}
                            flatIcon={true}
                            icon={
                              <CheckIcon
                                className={classNames(
                                  projectcss.all,
                                  sty.svg__noRot
                                )}
                                role={"img"}
                              />
                            }
                            noTitle={true}
                          />
                        </React.Fragment>
                      }
                      dollars={"30"}
                      label={
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text___1TqG
                          )}
                        >
                          {"pro"}
                        </div>
                      }
                    />

                    <PriceCard
                      action={
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__kSpA0
                          )}
                        >
                          {"Buy Business"}
                        </div>
                      }
                      className={classNames(
                        "__wab_instance",
                        sty.priceCard___277AJ
                      )}
                      description={
                        <React.Fragment>
                          <ValueProp
                            className={classNames(
                              "__wab_instance",
                              sty.valueProp__qOAjw
                            )}
                            description={"Pro plan, plus:"}
                            flatIcon={true}
                            icon={
                              <CheckIcon
                                className={classNames(
                                  projectcss.all,
                                  sty.svg___6Czv1
                                )}
                                role={"img"}
                              />
                            }
                            noTitle={true}
                          />

                          <ValueProp
                            className={classNames(
                              "__wab_instance",
                              sty.valueProp__xo6Lk
                            )}
                            description={"Customer Licensing Tools"}
                            flatIcon={true}
                            icon={
                              <CheckIcon
                                className={classNames(
                                  projectcss.all,
                                  sty.svg__lte8S
                                )}
                                role={"img"}
                              />
                            }
                            noTitle={true}
                          />

                          <ValueProp
                            className={classNames(
                              "__wab_instance",
                              sty.valueProp__kx9Lm
                            )}
                            description={"Enterprise White Labeling"}
                            flatIcon={true}
                            icon={
                              <CheckIcon
                                className={classNames(
                                  projectcss.all,
                                  sty.svg__atd6V
                                )}
                                role={"img"}
                              />
                            }
                            noTitle={true}
                          />

                          <ValueProp
                            className={classNames(
                              "__wab_instance",
                              sty.valueProp___0EluE
                            )}
                            description={"Cloud Cost Management"}
                            flatIcon={true}
                            icon={
                              <CheckIcon
                                className={classNames(
                                  projectcss.all,
                                  sty.svg__bZXey
                                )}
                                role={"img"}
                              />
                            }
                            noTitle={true}
                          />
                        </React.Fragment>
                      }
                      dollars={"99"}
                      label={
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__mrNju
                          )}
                        >
                          {"business"}
                        </div>
                      }
                    />
                  </p.Stack>
                </p.Stack>
              ) : null}
            </p.Stack>
          ) : null}
          {true ? (
            <FathymFooter
              data-plasmic-name={"fathymFooter"}
              data-plasmic-override={overrides.fathymFooter}
              className={classNames("__wab_instance", sty.fathymFooter)}
            />
          ) : null}
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "navbar",
    "learnMore",
    "section",
    "foreground3",
    "fathymFooter"
  ],
  navbar: ["navbar"],
  learnMore: ["learnMore"],
  section: ["section", "foreground3"],
  foreground3: ["foreground3"],
  fathymFooter: ["fathymFooter"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  navbar: typeof Navbar;
  learnMore: "a";
  section: "section";
  foreground3: "div";
  fathymFooter: typeof FathymFooter;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicHomepage__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicHomepage__VariantsArgs;
    args?: PlasmicHomepage__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicHomepage__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicHomepage__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicHomepage__ArgProps,
          internalVariantPropNames: PlasmicHomepage__VariantProps
        }),
      [props, nodeName]
    );

    return PlasmicHomepage__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicHomepage";
  } else {
    func.displayName = `PlasmicHomepage.${nodeName}`;
  }
  return func;
}

export const PlasmicHomepage = Object.assign(
  // Top-level PlasmicHomepage renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    navbar: makeNodeComponent("navbar"),
    learnMore: makeNodeComponent("learnMore"),
    section: makeNodeComponent("section"),
    foreground3: makeNodeComponent("foreground3"),
    fathymFooter: makeNodeComponent("fathymFooter"),

    // Metadata about props expected for PlasmicHomepage
    internalVariantProps: PlasmicHomepage__VariantProps,
    internalArgProps: PlasmicHomepage__ArgProps
  }
);

export default PlasmicHomepage;
/* prettier-ignore-end */
